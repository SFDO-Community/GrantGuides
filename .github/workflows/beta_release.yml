name: beta release

on:
  workflow_dispatch:
    
env:
      CUMULUSCI_KEYCHAIN_CLASS: cumulusci.core.keychain.EnvironmentProjectKeychain
      CUMULUSCI_SERVICE_github: ${{ secrets.CUMULUSCI_SERVICE_GITHUB }}
jobs:
  unit_tests:
    name: "Run Beta release"
    runs-on: ubuntu-latest
    steps:
      # Install Salesforce CLI
      - name: 'Install Salesforce CLI'
        run: |
            npm install @salesforce/cli --location=global
            nodeInstallPath=$(npm config get prefix)
            echo "$nodeInstallPath/bin" >> $GITHUB_PATH
            sf --version

      # Checkout the source code
      - name: 'Checkout source code'
        uses: actions/checkout@v4

      # Store secret for dev hub
      - name: 'Populate auth file with DEV_HUB_AUTH secret'
        shell: bash
        run: |
            echo ${{ secrets.DEV_HUB_AUTH}} > ./DEV_HUB_AUTH.txt
            secretFileSize=$(wc -c "./DEV_HUB_AUTH.txt" | awk '{print $1}')
            if [ $secretFileSize == 1 ]; then
                echo "Missing DEV_HUB_AUTH secret. Is this workflow running on a fork?";
                exit 1;
            fi

      # Authenticate dev hub
      - name: 'Authenticate Dev Hub'
        run: sf org login sfdx-url -f ./DEV_HUB_AUTH.txt -a devhub -d

      # Remove auth file
      - name: 'Remove auth file'
        run: rm -f ./DEV_HUB_AUTH.txt
      
      #Create Package Version
      - name: "Create package version"
        id: createPackageVersion
        run: |
          set +e
          json=$(sf package version create -p "Grants Content Kit" -x -f config/project-scratch-def.json -w 10 -b main -c --json)
          echo $json
          status=$(echo $json | jq '.status')
          if [ $status == "0" ]; then
          packageVersionId=$(echo $json | jq -r '.result.SubscriberPackageVersionId')
          echo "::set-output name=packageVersionId::$packageVersionId"
          else
          echo "sf package creation failed"
          fi
          exit $status
        
      # Wait for package replication
      - name: 'Wait for package replication'
        run: sleep 360s
 
      # Create scratch org
      - name: 'Create scratch org'
        run: sf org create scratch -f config/project-scratch-def.json -a scratch-org -d -y 1
      # Install new package in scratch org
      - name: 'Install new package version in scratch org'
        run: sf package install -p ${{ steps.createPackageVersion.outputs.packageVersionId }} -w 10 -o scratch-org -r
      # Housekeeping
      - name: 'Delete scratch org'
        run: sf org delete scratch -p -o scratch-org

      # Pull Request commit generated Package Id in sfdx-package.json file. 
      - name: Create Pull Request
        id: create-pr
        uses: peter-evans/create-pull-request@v6
        with:
          title: 'Bump package version to ${{ steps.createPackageVersion.outputs.packageVersionId }}'
          body: |
            This pull request updates the package version to ${{ steps.createPackageVersion.outputs.packageVersionId }}.
          branch: 'bump-package-version-${{ steps.createPackageVersion.outputs.packageVersionId }}'
          commit-message: 'chore: bump package version to ${{ steps.createPackageVersion.outputs.packageVersionId }}'
          labels: 'dependencies, automated pr'
          token: ${{ secrets.GITHUB_TOKEN }}

        # Approve and mark PR for auto merge
      - name: 'Approve and mark PR for auto merge'
        run: |
            gh pr review --approve "$PR_NUMBER"
            gh pr merge --auto --squash --delete-branch "$PR_NUMBER" 
        env:
            GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
            PR_NUMBER: ${{ steps.create-pr.outputs.pull-request-number }}